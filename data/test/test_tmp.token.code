public int entrySize ( Object key , Object value ) throws IllegalArgumentException { if ( value == Token . TOMBSTONE ) { return NUM_ ; } int size = HeapLRUCapacityController . this . getPerEntryOverhead ( ) ; size += sizeof ( key ) ; size += sizeof ( value ) ; return size ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public CModuleFilterFieldMenu ( final JTextField filterField ) { add ( new CFilterViewsAction ( filterField ) ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public TLongArrayList ( ) { this ( DEFAULT_CAPACITY ) ; }
@ Field ( NUM_ ) public Pointer < Double > pdblVal ( ) { return this . io . getPointerField ( this , NUM_ ) ; }
public static DecomposableMatchBuilder1 < Float , Float > caseFloat ( MatchesAny f ) { List < Matcher < Object > > matchers = new ArrayList < > ( ) ; matchers . add ( any ( ) ) ; return new DecomposableMatchBuilder1 < > ( matchers , NUM_ , new PrimitiveFieldExtractor < > ( Float . class ) ) ; }
public synchronized Map < D , EdgeFunction < L > > forwardLookup ( D sourceVal , N target ) { assert sourceVal != null ; assert target != null ; Map < D , EdgeFunction < L > > res = nonEmptyForwardLookup . get ( sourceVal , target ) ; if ( res == null ) return Collections . emptyMap ( ) ; return res ; }
private boolean confirmDeleteFiles ( ) throws ClientException { return askConfirmation ( INFO_CLI_UNINSTALL_CONFIRM_DELETE_FILES . get ( ) , BOOL_ , logger ) ; }
public PaymentDataException ( String message , Reason reason ) { super ( message ) ; setMessageKey ( getMessageKey ( ) + STR_ + reason . toString ( ) ) ; }
public static void writeCollection ( XMLOutput xmlOutput , Collection < ? extends XMLWriteable > collection ) throws IOException { for ( XMLWriteable obj : collection ) { obj . writeXML ( xmlOutput ) ; } }
public static org . oscm . vo . VOPricedOption convertToApi ( org . oscm . internal . vo . VOPricedOption oldVO ) { if ( oldVO == null ) { return null ; } org . oscm . vo . VOPricedOption newVO = new org . oscm . vo . VOPricedOption ( ) ; newVO . setKey ( oldVO . getKey ( ) ) ; newVO . setVersion ( oldVO . getVersion ( ) ) ; newVO . setPricePerUser ( oldVO . getPricePerUser ( ) ) ; newVO . setPricePerSubscription ( oldVO . getPricePerSubscription ( ) ) ; newVO . setParameterOptionKey ( oldVO . getParameterOptionKey ( ) ) ; newVO . setOptionId ( oldVO . getOptionId ( ) ) ; newVO . setRoleSpecificUserPrices ( convertToApiVOPricedRole ( oldVO . getRoleSpecificUserPrices ( ) ) ) ; return newVO ; }
public static void waitForCondition ( String condition ) { BValue cond = getCond ( condition ) ; synchronized ( cond ) { if ( ! cond . v ) { try { cond . wait ( ) ; } catch ( InterruptedException e ) { } } } }
public void addSprite ( OdorWorldEntity sprite ) { sprites . add ( sprite ) ; }
public static boolean isLegalFileName ( String fileName ) { for ( int i = NUM_ ; i < fileName . length ( ) ; i ++ ) { char c = fileName . charAt ( i ) ; if ( ! isLegalFileNameChar ( c ) ) { return BOOL_ ; } } return BOOL_ ; }
public int sizeMapArray ( ) { int x = NUM_ ; for ( Segment < K , V > s : segments ) { x += s . entries . length ; } return x ; }
public NewVariableResolver ( VariableResolver original ) { this . original = original ; FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getApplicationMap ( ) . put ( STR_ , this ) ; }
private File copy ( String asset ) throws IOException { InputStream source = mAssetManager . open ( asset ) ; File destinationFile = new File ( mExternalDir , asset ) ; destinationFile . getParentFile ( ) . mkdirs ( ) ; FileOutputStream destination = new FileOutputStream ( destinationFile ) ; byte [ ] buffer = new byte [ NUM_ ] ; int nread ; while ( ( nread = source . read ( buffer ) ) != - NUM_ ) { if ( nread == NUM_ ) { nread = source . read ( ) ; if ( nread < NUM_ ) break ; destination . write ( nread ) ; continue ; } destination . write ( buffer , NUM_ , nread ) ; } destination . close ( ) ; return destinationFile ; }
@ Override public Foo fetchByUuid_C_Last ( String uuid , long companyId , OrderByComparator < Foo > orderByComparator ) { int count = countByUuid_C ( uuid , companyId ) ; if ( count == NUM_ ) { return null ; } List < Foo > list = findByUuid_C ( uuid , companyId , count - NUM_ , count , orderByComparator ) ; if ( ! list . isEmpty ( ) ) { return list . get ( NUM_ ) ; } return null ; }
public void addComponentListener ( ComponentListener cl ) { super . addComponentListener ( cl ) ; if ( localHackList == null ) { localHackList = new ListenerSupport < ComponentListener > ( this ) ; } localHackList . add ( cl ) ; }
public IllegalAddressException ( ) { }
public CustomPopupWindow ( View contentView , int width , int height , int animationStyleId , boolean outsideTouchable ) { mContentView = contentView ; mWidth = width ; mHeight = height ; mAnimationId = animationStyleId ; mOutsideTouchable = outsideTouchable ; }
public Set createGroupContainers ( Set groupContainerNames ) throws AMException , SSOException { Iterator iter = groupContainerNames . iterator ( ) ; Set groupContainers = new HashSet ( ) ; while ( iter . hasNext ( ) ) { String groupContainerDN = AMNamingAttrManager . getNamingAttr ( GROUP_CONTAINER ) + STR_ + ( ( String ) iter . next ( ) ) + STR_ + entryDN ; AMGroupContainerImpl groupContainerImpl = new AMGroupContainerImpl ( token , groupContainerDN ) ; groupContainerImpl . create ( ) ; groupContainers . add ( groupContainerImpl ) ; } return groupContainers ; }
public Object jjtAccept ( SyntaxTreeBuilderVisitor visitor , Object data ) throws VisitorException { return visitor . visit ( this , data ) ; }
private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; this . rosePaint = SerialUtilities . readPaint ( stream ) ; this . roseCenterPaint = SerialUtilities . readPaint ( stream ) ; this . roseHighlightPaint = SerialUtilities . readPaint ( stream ) ; }
public JSONObject makeProblemPostedProps ( final String category , final Attachment attachment , final int postLength ) { JSONObject props ; try { props = new JSONObject ( ) ; props . put ( STR_ , category ) ; props . put ( STR_ , attachment . code ) ; props . put ( STR_ , postLength ) ; } catch ( JSONException e ) { Logger . e ( TAG , STR_ , e ) ; props = null ; } return props ; }
public static String userFlagFromBytes ( byte [ ] bytes ) { if ( Bytes . startsWith ( bytes , PREFIX_UFLAGS_B ) ) { return Bytes . toString ( bytes , PREFIX_UFLAGS_B . length , bytes . length - PREFIX_UFLAGS_B . length ) ; } throw new RuntimeException ( STR_ + Bytes . toString ( bytes ) ) ; }
protected void appendSummary ( final StringBuffer buffer , final String fieldName , final Object [ ] array ) { appendSummarySize ( buffer , fieldName , array . length ) ; }
public static boolean isValid ( final String uri ) { return uri . trim ( ) . startsWith ( PREFIX ) ; }
public JsonArrayRequest ( int method , String url , String requestBody , Listener < JSONArray > listener , ErrorListener errorListener ) { super ( method , url , requestBody , listener , errorListener ) ; }
protected Builder ( @ Nonnull final Builder builder ) { Check . notNull ( builder , STR_ ) ; family = builder . family ; icon = builder . icon ; id = builder . id ; infoUrl = builder . infoUrl ; name = builder . name ; patterns . addAll ( builder . patterns ) ; producer = builder . producer ; producerUrl = builder . producerUrl ; url = builder . url ; }
public static Enumeration < GraphNode > enumerateTopSort ( Graph G ) { return enumerateTopSort ( G , G . enumerateNodes ( ) ) ; }
public boolean isUpdateRequired ( ) { return this . updateRequired ; }
public String toString ( ) { String result = super . toString ( ) + STR_ ; if ( names == null ) { result += STR_ ; } else { for ( GeneralName name : names . names ( ) ) { result += STR_ + name + STR_ ; } } result += STR_ ; return result ; }
void removeParserHighlight ( Object tag ) { removeListHighlight ( parserHighlights , tag ) ; }
@ Override public void clearAnswer ( ) { DateTime ldt = new DateTime ( ) ; mDatePicker . init ( ldt . getYear ( ) , ldt . getMonthOfYear ( ) - NUM_ , ldt . getDayOfMonth ( ) , mDateListener ) ; }
public static boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str == null || prefix == null ) { return BOOL_ ; } if ( str . startsWith ( prefix ) ) { return BOOL_ ; } if ( str . length ( ) < prefix . length ( ) ) { return BOOL_ ; } String lcStr = str . substring ( NUM_ , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; }
public Version version ( ) { return VersionUtil . versionFor ( getClass ( ) ) ; }
public double interpolateZValue ( Vertex v0 , Vertex v1 , Vertex v2 ) { double x0 = v0 . getX ( ) ; double y0 = v0 . getY ( ) ; double a = v1 . getX ( ) - x0 ; double b = v2 . getX ( ) - x0 ; double c = v1 . getY ( ) - y0 ; double d = v2 . getY ( ) - y0 ; double det = a * d - b * c ; double dx = this . getX ( ) - x0 ; double dy = this . getY ( ) - y0 ; double t = ( d * dx - b * dy ) / det ; double u = ( - c * dx + a * dy ) / det ; double z = v0 . getZ ( ) + t * ( v1 . getZ ( ) - v0 . getZ ( ) ) + u * ( v2 . getZ ( ) - v0 . getZ ( ) ) ; return z ; }
public CurveCreator ( int degree ) { this . degree = degree ; }
public BasicEofSensorWatcher ( ManagedClientConnection conn , boolean reuse ) { if ( conn == null ) throw new IllegalArgumentException ( STR_ ) ; managedConn = conn ; attemptReuse = reuse ; }
public void reset ( ) { token = null ; status = S_INIT ; handlerStatusStack = null ; }
public boolean testSphere ( float x , float y , float z , float r ) { return nxX * x + nxY * y + nxZ * z + nxW >= - r && pxX * x + pxY * y + pxZ * z + pxW >= - r && nyX * x + nyY * y + nyZ * z + nyW >= - r && pyX * x + pyY * y + pyZ * z + pyW >= - r && nzX * x + nzY * y + nzZ * z + nzW >= - r && pzX * x + pzY * y + pzZ * z + pzW >= - r ; }
protected void installListeners ( JComponent c ) { c . addPropertyChangeListener ( this ) ; }
public static List < Number > measurements ( List < EvaluationStatistics > stats , String classifier , String dataset , String measurement ) { List < Number > result ; result = new ArrayList < > ( ) ; for ( EvaluationStatistics stat : stats ) { if ( stat . getCommandLine ( ) . equals ( classifier ) && stat . getRelation ( ) . equals ( dataset ) ) { if ( stat . containsKey ( measurement ) ) result . add ( stat . get ( measurement ) ) ; } } return result ; }
public boolean isContainsKey ( ) { return this . opType == OP_TYPE_CONTAINS_KEY ; }
@ Override public void configureZone ( final StendhalRPZone zone , final Map < String , String > attributes ) { buildZooArea ( zone ) ; }
public void loadData ( ) throws CoreException { TLCOutputSourceRegistry modelCheckSourceRegistry = TLCOutputSourceRegistry . getModelCheckSourceRegistry ( ) ; TLCModelLaunchDataProvider provider = modelCheckSourceRegistry . getProvider ( getModel ( ) ) ; if ( provider != null ) { provider . setPresenter ( this ) ; } else { reinit ( ) ; } expressionEvalInput . setDocument ( new Document ( getModel ( ) . getEvalExpression ( ) ) ) ; }
private static void abort ( String message , Throwable exception , int code ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , TypeScriptCorePlugin . PLUGIN_ID , code , message , exception ) ) ; }
public static boolean isMT ( Instances D ) { int L = D . classIndex ( ) ; for ( int j = NUM_ ; j < L ; j ++ ) { if ( D . attribute ( j ) . isNominal ( ) ) { if ( D . attribute ( j ) . numValues ( ) > NUM_ ) { return BOOL_ ; } } else { System . err . println ( STR_ ) ; } } return BOOL_ ; }
private environment . frame create globals ( event handler event handler , options options , config file config file ) { environment env = create environment ( event handler , environment . skylark , immutable map . < string , extension > of ( ) ) ; for ( class < ? > module : modules ) { logger . log ( level . info , str_ + module . get name ( ) ) ; runtime . register module globals ( env , module ) ; if ( options aware module . class . is assignable from ( module ) ) { ( ( options aware module ) get module global ( env , module ) ) . set options ( options ) ; } if ( labels aware module . class . is assignable from ( module ) ) { ( ( labels aware module ) get module global ( env , module ) ) . set config file ( config file ) ; } } env . mutability ( ) . close ( ) ; return env . get globals ( ) ; } <code> MethodDeclaration ReferenceType ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference MemberReference MethodInvocation TypeArgument ReferenceType TypeArgument ReferenceType ForStatement EnhancedForControl VariableDeclaration ReferenceType TypeArgument VariableDeclarator MemberReference BlockStatement StatementExpression MethodInvocation MemberReference BinaryOperation MemberReference MethodInvocation StatementExpression MethodInvocation MemberReference MemberReference IfStatement ClassReference MethodInvocation MemberReference ReferenceType BlockStatement StatementExpression Cast ReferenceType MethodInvocation MemberReference MemberReference IfStatement ClassReference MethodInvocation MemberReference ReferenceType BlockStatement StatementExpression Cast ReferenceType MethodInvocation MemberReference MemberReference StatementExpression MethodInvocation MethodInvocation ReturnStatement MethodInvocation
private boolean bounds safe ( int x , int y ) { if ( ( y < num_ ) || ( y >= height ) || ( x < num_ ) || ( x >= width ) ) { return bool_ ; } return bool_ ; } <code> MethodDeclaration BasicType FormalParameter BasicType FormalParameter BasicType IfStatement BinaryOperation BinaryOperation BinaryOperation BinaryOperation MemberReference MemberReference BinaryOperation MemberReference MemberReference BinaryOperation MemberReference MemberReference BinaryOperation MemberReference MemberReference BlockStatement ReturnStatement MemberReference ReturnStatement MemberReference
private resource response patch resource by id ( context context , request request , string resource id , string revision , list < patch operation > patch operations ) throws resource exception { id required ( request . get resource path ( ) ) ; no sub objects ( request . get resource path ( ) ) ; resource response resource = read resource ( context , repo id ( resource id ) ) ; return patch resource ( context , request , resource , revision , patch operations ) ; } <code> MethodDeclaration ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType TypeArgument ReferenceType StatementExpression MethodInvocation MethodInvocation StatementExpression MethodInvocation MethodInvocation LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference MethodInvocation MemberReference ReturnStatement MethodInvocation MemberReference MemberReference MemberReference MemberReference MemberReference
private void zoom out ( ) { chart view . zoom out ( ) ; zoom controls . set is zoom in enabled ( chart view . can zoom in ( ) ) ; zoom controls . set is zoom out enabled ( chart view . can zoom out ( ) ) ; } <code> MethodDeclaration StatementExpression MethodInvocation StatementExpression MethodInvocation MethodInvocation StatementExpression MethodInvocation MethodInvocation
public combined range xyplot ( value axis range axis ) { super ( null , null , range axis , null ) ; this . subplots = new java . util . array list < xyplot > ( ) ; } <code> ConstructorDeclaration FormalParameter ReferenceType StatementExpression SuperConstructorInvocation Literal Literal MemberReference Literal StatementExpression Assignment This MemberReference ClassCreator ReferenceType ReferenceType ReferenceType TypeArgument ReferenceType
public static void add ghoul armor textures ( item helmet , item chestplate , item leggings , item boots , string res1 , string res2 ) { add ghoul armor textures ( helmet , chestplate , leggings , boots , new resource location ( res1 ) , new resource location ( res2 ) ) ; } <code> MethodDeclaration FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType StatementExpression MethodInvocation MemberReference MemberReference MemberReference MemberReference ClassCreator ReferenceType MemberReference ClassCreator ReferenceType MemberReference
public no such name exception ( ) { super ( ) ; } <code> ConstructorDeclaration StatementExpression SuperConstructorInvocation
public int opt int ( string key ) { return this . opt int ( key , num_ ) ; } <code> MethodDeclaration BasicType FormalParameter ReferenceType ReturnStatement This MethodInvocation MemberReference MemberReference
public static void open bug buttons window item ( connector connector ) { raptor window item [ ] items = raptor . get instance ( ) . get window ( ) . get window items ( bug buttons window item . class ) ; boolean open new window = bool_ ; for ( raptor window item item : items ) { bug buttons window item bug buttons item = ( bug buttons window item ) item ; if ( bug buttons item . get connector ( ) == connector ) { raptor . get instance ( ) . get window ( ) . force focus ( item ) ; open new window = bool_ ; break ; } } if ( open new window ) { raptor . get instance ( ) . get window ( ) . add raptor window item ( new bug buttons window item ( connector ) ) ; } } <code> MethodDeclaration FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MethodInvocation MethodInvocation ClassReference ReferenceType LocalVariableDeclaration BasicType VariableDeclarator MemberReference ForStatement EnhancedForControl VariableDeclaration ReferenceType VariableDeclarator MemberReference BlockStatement LocalVariableDeclaration ReferenceType VariableDeclarator Cast ReferenceType MemberReference IfStatement BinaryOperation MethodInvocation MemberReference BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation MemberReference StatementExpression Assignment MemberReference MemberReference BreakStatement IfStatement MemberReference BlockStatement StatementExpression MethodInvocation MethodInvocation MethodInvocation ClassCreator ReferenceType MemberReference
private void write java parameter spec ( java parameter spec spec , document document , element parent element ) { element parameter = document . create element ( str_ ) ; parent element . append child ( parameter ) ; parameter . set attribute ( str_ , spec . get package name ( ) ) ; parameter . set attribute ( str_ , spec . get class name ( ) ) ; parameter . set attribute ( str_ , spec . get half signature ( ) ) ; parameter . set attribute ( str_ , integer . to string ( spec . get param idx ( ) ) ) ; } <code> MethodDeclaration FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference MethodInvocation StatementExpression MethodInvocation MemberReference MethodInvocation StatementExpression MethodInvocation MemberReference MethodInvocation StatementExpression MethodInvocation MemberReference MethodInvocation MethodInvocation
@ override public enumeration < option > list options ( ) { vector < option > new vector = new vector < option > ( num_ ) ; new vector . add element ( new option ( str_ + str_ + str_ + str_ , str_ , num_ , str_ ) ) ; new vector . add element ( new option ( str_ + str_ , str_ , num_ , str_ ) ) ; return new vector . elements ( ) ; } <code> MethodDeclaration Annotation ReferenceType TypeArgument ReferenceType LocalVariableDeclaration ReferenceType TypeArgument ReferenceType VariableDeclarator ClassCreator ReferenceType TypeArgument ReferenceType MemberReference StatementExpression MethodInvocation ClassCreator ReferenceType BinaryOperation BinaryOperation BinaryOperation MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference StatementExpression MethodInvocation ClassCreator ReferenceType BinaryOperation MemberReference MemberReference MemberReference MemberReference MemberReference ReturnStatement MethodInvocation
public static boolean is token expired ( string token expiry ) throws core token exception { try { date expiry date = date utils . string to date ( token expiry ) ; long now = current time millis ( ) ; if ( expiry date . get time ( ) <= now ) { return bool_ ; } else { return bool_ ; } } catch ( parse exception ex ) { string [ ] data = new string [ ] { token expiry } ; throw new core token exception ( num_ , data , num_ ) ; } } <code> MethodDeclaration BasicType FormalParameter ReferenceType TryStatement LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation IfStatement BinaryOperation MethodInvocation MemberReference BlockStatement ReturnStatement MemberReference BlockStatement ReturnStatement MemberReference CatchClause CatchClauseParameter LocalVariableDeclaration ReferenceType VariableDeclarator ArrayCreator ReferenceType ArrayInitializer MemberReference ThrowStatement ClassCreator ReferenceType MemberReference MemberReference MemberReference
private void await ( ) { try { boolean node removed = this . remove converted nodes ( root ) ; if ( ! node removed && root . has children ( ) ) { logger . debug ( str_ , blocking queue . size ( ) ) ; this . blocking queue . take ( ) ; this . blocking queue . offer ( num_ ) ; logger . debug ( str_ , blocking queue . size ( ) ) ; } } catch ( interrupted exception e ) { logger . warn ( str_ ) ; thread . current thread ( ) . interrupt ( ) ; } } <code> MethodDeclaration TryStatement LocalVariableDeclaration BasicType VariableDeclarator This MethodInvocation MemberReference IfStatement BinaryOperation MemberReference MethodInvocation BlockStatement StatementExpression MethodInvocation MemberReference MethodInvocation StatementExpression This MemberReference MethodInvocation StatementExpression This MemberReference MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference MethodInvocation CatchClause CatchClauseParameter StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MethodInvocation
public file filter utils ( ) { } <code> ConstructorDeclaration
public void add point ( point layer point ) { image point icon = point . get icon ( ) ; if ( point icon == null ) { point . set icon ( icon ) ; } if ( ! point . is projected ( ) ) { coord c = get projection ( ) . from wgs84 ( point ) ; point . set latitude ( c . get latitude ( ) ) ; point . set longitude ( c . get longitude ( ) ) ; point . set projected ( bool_ ) ; } points . add element ( point ) ; } <code> MethodDeclaration FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation IfStatement BinaryOperation MemberReference Literal BlockStatement StatementExpression MethodInvocation MemberReference IfStatement MethodInvocation BlockStatement LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MethodInvocation MemberReference StatementExpression MethodInvocation MethodInvocation StatementExpression MethodInvocation MethodInvocation StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference
public t case greater op_ ( greater op_ object ) { return null ; } <code> MethodDeclaration ReferenceType FormalParameter ReferenceType ReturnStatement Literal
public void test stream vs bytes ( ) throws exception { font factory factory = font factory . get instance ( ) ; byte [ ] data = read to byte array ( test font . test font names . roboto . get file ( ) ) ; font byte font = factory . load fonts ( data ) [ num_ ] ; input stream is = new file input stream ( test font . test font names . roboto . get file ( ) ) ; font stream font ; try { stream font = factory . load fonts ( is ) [ num_ ] ; } finally { is . close ( ) ; } { boolean thrown = bool_ ; glyph byte glyph = get last glyph ( byte font ) ; try { int byte xmin = byte glyph . x min ( ) ; } catch ( index out of bounds exception e ) { thrown = bool_ ; } assert true ( str_ , thrown ) ; } { boolean thrown = bool_ ; glyph stream glyph = get last glyph ( stream font ) ; try { int stream xmin = stream glyph . x min ( ) ; } catch ( index out of bounds exception e ) { thrown = bool_ ; } assert true ( str_ , thrown ) ; } } <code> MethodDeclaration LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation MethodInvocation LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation ArraySelector MemberReference MemberReference LocalVariableDeclaration ReferenceType VariableDeclarator ClassCreator ReferenceType MethodInvocation LocalVariableDeclaration ReferenceType VariableDeclarator TryStatement StatementExpression Assignment MemberReference MethodInvocation ArraySelector MemberReference MemberReference StatementExpression MethodInvocation BlockStatement LocalVariableDeclaration BasicType VariableDeclarator MemberReference LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference TryStatement LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation CatchClause CatchClauseParameter StatementExpression Assignment MemberReference MemberReference StatementExpression MethodInvocation MemberReference MemberReference BlockStatement LocalVariableDeclaration BasicType VariableDeclarator MemberReference LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference TryStatement LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation CatchClause CatchClauseParameter StatementExpression Assignment MemberReference MemberReference StatementExpression MethodInvocation MemberReference MemberReference
public boolean is valid use ( annotated primitive type type , tree tree ) { return bool_ ; } <code> MethodDeclaration BasicType FormalParameter ReferenceType FormalParameter ReferenceType ReturnStatement MemberReference
@ hleunimplemented @ hlefunction ( nid = num_ , version = num_ ) public int sce usb cam poll read video frame end ( ) { if ( jpeg buffer == null || jpeg buffer . is null ( ) ) { return sce kernel errors . error_usbcam_no_read_on_video_frame ; } if ( current video frame count <= last video frame count ) { if ( log . is debug enabled ( ) ) { log . debug ( string . format ( str_ , current video frame count , last video frame count ) ) ; } return sce kernel errors . error_usbcam_no_video_frame_available ; } return write current video image ( jpeg buffer , jpeg buffer size ) ; } <code> MethodDeclaration Annotation Annotation ElementValuePair MemberReference ElementValuePair MemberReference BasicType IfStatement BinaryOperation BinaryOperation MemberReference Literal MethodInvocation BlockStatement ReturnStatement MemberReference IfStatement BinaryOperation MemberReference MemberReference BlockStatement IfStatement MethodInvocation BlockStatement StatementExpression MethodInvocation MethodInvocation MemberReference MemberReference MemberReference ReturnStatement MemberReference ReturnStatement MethodInvocation MemberReference MemberReference
public final static long murmur hash3 ( long x ) { x ^= x > > > num_ ; x *= num_ ; x ^= x > > > num_ ; x *= num_ ; x ^= x > > > num_ ; return x ; } <code> MethodDeclaration BasicType FormalParameter BasicType StatementExpression Assignment MemberReference BinaryOperation MemberReference MemberReference StatementExpression Assignment MemberReference MemberReference StatementExpression Assignment MemberReference BinaryOperation MemberReference MemberReference StatementExpression Assignment MemberReference MemberReference StatementExpression Assignment MemberReference BinaryOperation MemberReference MemberReference ReturnStatement MemberReference
@ override public string to string ( ) { return str_ + str_ + shared size bytes + str_ + str_ + const size bytes + str_ + str_ + local size bytes + str_ + str_ + max threads per block + str_ + str_ + num regs + str_ + str_ + ptx version + str_ + str_ + binary version + str_ ; } <code> MethodDeclaration Annotation ReferenceType ReturnStatement BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation BinaryOperation MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference MemberReference
public boolean is crippled ( ) { if ( destroyed || jammed || missing || useless || fired ) { return bool_ ; } if ( ( type instanceof ammo weapon ) || ( type instanceof ammo bay weapon ) ) { if ( ( get linked ( ) == null ) || ( entity . get total ammo of type ( get linked ( ) . get type ( ) ) < num_ ) ) { return bool_ ; } } if ( is dwpmounted && ( get linked by ( ) != null ) ) { return bool_ ; } return bool_ ; } <code> MethodDeclaration BasicType IfStatement BinaryOperation BinaryOperation BinaryOperation BinaryOperation MemberReference MemberReference MemberReference MemberReference MemberReference BlockStatement ReturnStatement MemberReference IfStatement BinaryOperation BinaryOperation MemberReference ReferenceType BinaryOperation MemberReference ReferenceType BlockStatement IfStatement BinaryOperation BinaryOperation MethodInvocation Literal BinaryOperation MethodInvocation MethodInvocation MethodInvocation MemberReference BlockStatement ReturnStatement MemberReference IfStatement BinaryOperation MemberReference BinaryOperation MethodInvocation Literal BlockStatement ReturnStatement MemberReference ReturnStatement MemberReference
public static simple schedule builder repeat secondly for total count ( int count ) { if ( count < num_ ) throw new illegal argument exception ( str_ + count ) ; return simple schedule ( ) . with interval in seconds ( num_ ) . with repeat count ( count - num_ ) ; } <code> MethodDeclaration ReferenceType FormalParameter BasicType IfStatement BinaryOperation MemberReference MemberReference ThrowStatement ClassCreator ReferenceType BinaryOperation MemberReference MemberReference ReturnStatement MethodInvocation MethodInvocation MemberReference MethodInvocation BinaryOperation MemberReference MemberReference
protected boolean translate command ( string builder buf , string pattern , int index , boolean old inside ) { char first char = pattern . char at ( index ) ; boolean new inside = old inside ; if ( first char == str_ || first char == str_ ) { if ( index + num_ < pattern . length ( ) ) { new inside = translate command ( buf , pattern , index + num_ , old inside ) ; } else { buf . append ( quote ( str_ + first char , old inside ) ) ; } } else { string command = translate . get property ( string . value of ( first char ) ) ; if ( command == null ) { buf . append ( quote ( str_ + first char , old inside ) ) ; } else { if ( old inside ) { buf . append ( str_ ) ; } buf . append ( command ) ; new inside = bool_ ; } } return new inside ; } <code> MethodDeclaration BasicType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter BasicType FormalParameter BasicType LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation MemberReference LocalVariableDeclaration BasicType VariableDeclarator MemberReference IfStatement BinaryOperation BinaryOperation MemberReference MemberReference BinaryOperation MemberReference MemberReference BlockStatement IfStatement BinaryOperation BinaryOperation MemberReference MemberReference MethodInvocation BlockStatement StatementExpression Assignment MemberReference MethodInvocation MemberReference MemberReference BinaryOperation MemberReference MemberReference MemberReference BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation MemberReference MemberReference MemberReference BlockStatement LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MethodInvocation MemberReference IfStatement BinaryOperation MemberReference Literal BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation MemberReference MemberReference MemberReference BlockStatement IfStatement MemberReference BlockStatement StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference StatementExpression Assignment MemberReference MemberReference ReturnStatement MemberReference
public void begin ( string namespace , string name , attributes attributes ) throws exception { assert digester . peek ( ) instanceof managed bean bean : str_ ; if ( digester . get logger ( ) . is debug enabled ( ) ) { digester . get logger ( ) . debug ( str_ + digester . get match ( ) + str_ + class_name ) ; } class clazz = digester . get class loader ( ) . load class ( class_name ) ; managed property bean mpb = ( managed property bean ) clazz . new instance ( ) ; digester . push ( mpb ) ; } <code> MethodDeclaration FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType AssertStatement BinaryOperation MethodInvocation ReferenceType MemberReference IfStatement MethodInvocation MethodInvocation BlockStatement StatementExpression MethodInvocation MethodInvocation BinaryOperation BinaryOperation BinaryOperation MemberReference MethodInvocation MemberReference MemberReference LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MethodInvocation MemberReference LocalVariableDeclaration ReferenceType VariableDeclarator Cast ReferenceType MethodInvocation StatementExpression MethodInvocation MemberReference
private static void remove loop safepoint ( structured graph graph ) { loop begin node loop begin = find first loop ( graph ) ; loop begin . disable safepoint ( ) ; } <code> MethodDeclaration FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference StatementExpression MethodInvocation
private static long spin ( long ms ) { long start = thread mxbean . get current thread cpu time ( ) ; do { long duration ms = ( thread mxbean . get current thread cpu time ( ) - start ) / num_ ; if ( duration ms >= ms ) { return duration ms ; } } while ( bool_ ) ; } <code> MethodDeclaration BasicType FormalParameter BasicType LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation DoStatement MemberReference BlockStatement LocalVariableDeclaration BasicType VariableDeclarator BinaryOperation BinaryOperation MethodInvocation MemberReference MemberReference IfStatement BinaryOperation MemberReference MemberReference BlockStatement ReturnStatement MemberReference
private void zz scan error ( int error code ) { string message ; try { message = zz_error_msg [ error code ] ; } catch ( array index out of bounds exception e ) { message = zz_error_msg [ zz_unknown_error ] ; } throw new error ( message ) ; } <code> MethodDeclaration FormalParameter BasicType LocalVariableDeclaration ReferenceType VariableDeclarator TryStatement StatementExpression Assignment MemberReference MemberReference ArraySelector MemberReference CatchClause CatchClauseParameter StatementExpression Assignment MemberReference MemberReference ArraySelector MemberReference ThrowStatement ClassCreator ReferenceType MemberReference
public synchronized void run ( ) { running = bool_ ; while ( running ) { try { socket s = ss . accept ( ) ; accepted connections ++ ; if ( accepted connections >= accept limit ) { running = bool_ ; } new thread ( new worker ( s ) , str_ ) . start ( ) ; } catch ( socket exception e ) { log ( e . get message ( ) ) ; running = bool_ ; } catch ( ioexception e ) { log ( e . get message ( ) ) ; } } log ( str_ + this ) ; } <code> MethodDeclaration StatementExpression Assignment MemberReference MemberReference WhileStatement MemberReference BlockStatement TryStatement LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation StatementExpression MemberReference IfStatement BinaryOperation MemberReference MemberReference BlockStatement StatementExpression Assignment MemberReference MemberReference StatementExpression ClassCreator MethodInvocation ReferenceType ClassCreator ReferenceType MemberReference MemberReference CatchClause CatchClauseParameter StatementExpression MethodInvocation MethodInvocation StatementExpression Assignment MemberReference MemberReference CatchClause CatchClauseParameter StatementExpression MethodInvocation MethodInvocation StatementExpression MethodInvocation BinaryOperation MemberReference This
public enumeration < k > keys ( ) { return new key iterator ( ) ; } <code> MethodDeclaration ReferenceType TypeArgument ReferenceType ReturnStatement ClassCreator ReferenceType
protected action map create action map ( ) { action map map = super . create action map ( ) ; map . put ( str_ , new editor actions . save action ( bool_ ) ) ; map . put ( str_ , new editor actions . save action ( bool_ ) ) ; map . put ( str_ , new editor actions . new action ( ) ) ; map . put ( str_ , new editor actions . open action ( ) ) ; map . put ( str_ , new editor actions . history action ( bool_ ) ) ; map . put ( str_ , new editor actions . history action ( bool_ ) ) ; map . put ( str_ , mx graph actions . get select vertices action ( ) ) ; map . put ( str_ , mx graph actions . get select edges action ( ) ) ; return map ; } <code> MethodDeclaration ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator SuperMethodInvocation StatementExpression MethodInvocation MemberReference ClassCreator ReferenceType ReferenceType MemberReference StatementExpression MethodInvocation MemberReference ClassCreator ReferenceType ReferenceType MemberReference StatementExpression MethodInvocation MemberReference ClassCreator ReferenceType ReferenceType StatementExpression MethodInvocation MemberReference ClassCreator ReferenceType ReferenceType StatementExpression MethodInvocation MemberReference ClassCreator ReferenceType ReferenceType MemberReference StatementExpression MethodInvocation MemberReference ClassCreator ReferenceType ReferenceType MemberReference StatementExpression MethodInvocation MemberReference MethodInvocation StatementExpression MethodInvocation MemberReference MethodInvocation ReturnStatement MemberReference
@ override public string to string ( ) { iterator iter = key map . entry set ( ) . iterator ( ) ; string buffer buff = new string buffer ( str_ ) ; while ( iter . has next ( ) ) { map . entry entry = ( map . entry ) iter . next ( ) ; buff . append ( str_ ) . append ( entry . get key ( ) ) . append ( str_ ) . append ( entry . get value ( ) ) ; } return buff . to string ( ) ; } <code> MethodDeclaration Annotation ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MethodInvocation LocalVariableDeclaration ReferenceType VariableDeclarator ClassCreator ReferenceType MemberReference WhileStatement MethodInvocation BlockStatement LocalVariableDeclaration ReferenceType ReferenceType VariableDeclarator Cast ReferenceType ReferenceType MethodInvocation StatementExpression MethodInvocation MethodInvocation MethodInvocation MethodInvocation MemberReference MethodInvocation MethodInvocation MemberReference ReturnStatement MethodInvocation
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } } <code> MethodDeclaration FormalParameter ReferenceType IfStatement BinaryOperation MemberReference Literal BlockStatement StatementExpression MethodInvocation MemberReference
private boolean is empty ( string value ) { return value . length ( ) == num_ ; } <code> MethodDeclaration BasicType FormalParameter ReferenceType ReturnStatement BinaryOperation MethodInvocation MemberReference
private boolean match strings ( string pattern , string str , map < string , string > uri template variables ) { ant path string matcher matcher = new ant path string matcher ( pattern , str , uri template variables ) ; return matcher . match strings ( ) ; } <code> MethodDeclaration BasicType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType TypeArgument ReferenceType TypeArgument ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator ClassCreator ReferenceType MemberReference MemberReference MemberReference ReturnStatement MethodInvocation
@ transactional public < vo > vo update ( class < vo > vo type , object input param , user current user ) throws exception { t po = find by id param ( input param ) ; bean utils . copy properties ignore null ( input param , po ) ; return update by po ( vo type , po , current user ) ; } <code> MethodDeclaration Annotation TypeParameter ReferenceType FormalParameter ReferenceType TypeArgument ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference MemberReference ReturnStatement MethodInvocation MemberReference MemberReference MemberReference
public from matches filter ( string address ) { if ( address == null ) { throw new illegal argument exception ( str_ ) ; } this . address = address . to lower case ( ) ; match bare jid = str_ . equals ( string utils . parse resource ( address ) ) ; } <code> ConstructorDeclaration FormalParameter ReferenceType IfStatement BinaryOperation MemberReference Literal BlockStatement ThrowStatement ClassCreator ReferenceType MemberReference StatementExpression Assignment This MemberReference MethodInvocation StatementExpression Assignment MemberReference MethodInvocation MethodInvocation MemberReference
public bind operation process saslbind ( byte string raw bind dn , string sasl mechanism , byte string sasl credentials , list < control > controls ) { bind operation basis bind operation = new bind operation basis ( this , next operation id ( ) , next message id ( ) , controls , protocol_version , raw bind dn , sasl mechanism , sasl credentials ) ; bind operation . set internal operation ( bool_ ) ; bind operation . run ( ) ; return bind operation ; } <code> MethodDeclaration ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType TypeArgument ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator ClassCreator ReferenceType This MethodInvocation MethodInvocation MemberReference MemberReference MemberReference MemberReference MemberReference StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation ReturnStatement MemberReference
static void check parameter is not null ( final string parameter name , final object parameter value ) { if ( parameter value == null ) { throw new illegal argument exception ( parameter name + str_ ) ; } } <code> MethodDeclaration FormalParameter ReferenceType FormalParameter ReferenceType IfStatement BinaryOperation MemberReference Literal BlockStatement ThrowStatement ClassCreator ReferenceType BinaryOperation MemberReference MemberReference
public void key released ( key event e ) { if ( e . get key code ( ) == key event . vk_escape ) set text ( m_initial text ) ; } <code> MethodDeclaration FormalParameter ReferenceType IfStatement BinaryOperation MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference
protected string current database charset ( ) { string charset name = system variables . get variable ( str_ ) ; if ( charset name == null || str_ . equals ignore case ( charset name ) ) { charset name = system variables . get variable ( server_charset_name ) ; } return charset name ; } <code> MethodDeclaration ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation MemberReference IfStatement BinaryOperation BinaryOperation MemberReference Literal MethodInvocation MemberReference BlockStatement StatementExpression Assignment MemberReference MethodInvocation MemberReference ReturnStatement MemberReference
public void terminate ( int delay ) throws remote exception { system . exit ( num_ ) ; } <code> MethodDeclaration FormalParameter BasicType StatementExpression MethodInvocation MemberReference
private static void close quietly ( closeable closeable ) { try { if ( closeable != null ) { closeable . close ( ) ; } } catch ( ioexception e ) { slog . w ( log_tag , e ) ; } } <code> MethodDeclaration FormalParameter ReferenceType TryStatement IfStatement BinaryOperation MemberReference Literal BlockStatement StatementExpression MethodInvocation CatchClause CatchClauseParameter StatementExpression MethodInvocation MemberReference MemberReference
public void add token to filter chain ( filter chain filter chain , string key , string value ) { replace tokens replace token = new replace tokens ( ) ; replace tokens . token token = new replace tokens . token ( ) ; token . set key ( key ) ; token . set value ( value ) ; replace token . add configured token ( token ) ; filter chain . add replace tokens ( replace token ) ; } <code> MethodDeclaration FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType LocalVariableDeclaration ReferenceType VariableDeclarator ClassCreator ReferenceType LocalVariableDeclaration ReferenceType ReferenceType VariableDeclarator ClassCreator ReferenceType ReferenceType StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference StatementExpression MethodInvocation MemberReference
public boolean is relative ( ) { if ( relative == null ) { return bool_ ; } else { return relative ; } } <code> MethodDeclaration BasicType IfStatement BinaryOperation MemberReference Literal BlockStatement ReturnStatement MemberReference BlockStatement ReturnStatement MemberReference
protected hash attribute set ( attribute attribute , class < ? > interface name ) { if ( interface name == null ) { throw new null pointer exception ( str_ ) ; } my interface = interface name ; add ( attribute ) ; } <code> ConstructorDeclaration FormalParameter ReferenceType FormalParameter ReferenceType TypeArgument IfStatement BinaryOperation MemberReference Literal BlockStatement ThrowStatement ClassCreator ReferenceType MemberReference StatementExpression Assignment MemberReference MemberReference StatementExpression MethodInvocation MemberReference
public static boolean is polygon ( ompoly om poly ) { double [ ] points = om poly . get lat lon array ( ) ; int i = points . length ; boolean is polygon = bool_ ; if ( points != null && i > num_ ) { is polygon = points [ num_ ] == points [ i - num_ ] && points [ num_ ] == points [ i - num_ ] ; is polygon = is polygon && om poly . is polygon ( ) ; } return is polygon ; } <code> MethodDeclaration BasicType FormalParameter ReferenceType LocalVariableDeclaration BasicType VariableDeclarator MethodInvocation LocalVariableDeclaration BasicType VariableDeclarator MemberReference LocalVariableDeclaration BasicType VariableDeclarator MemberReference IfStatement BinaryOperation BinaryOperation MemberReference Literal BinaryOperation MemberReference MemberReference BlockStatement StatementExpression Assignment MemberReference BinaryOperation BinaryOperation MemberReference ArraySelector MemberReference MemberReference ArraySelector BinaryOperation MemberReference MemberReference BinaryOperation MemberReference ArraySelector MemberReference MemberReference ArraySelector BinaryOperation MemberReference MemberReference StatementExpression Assignment MemberReference BinaryOperation MemberReference MethodInvocation ReturnStatement MemberReference
public wrapped byte buffer slice ( ) { return wrapped byte buffer . wrap ( _buf . slice ( ) ) ; } <code> MethodDeclaration ReferenceType ReturnStatement MethodInvocation MethodInvocation
public binary table ( column table < ? > tab in ) { @ suppress warnings ( str_ ) column table < save state > tab = ( column table < save state > ) tab in ; save state extra = tab . get extra state ( ) ; this . column list = new array list < column desc > ( ) ; for ( column desc col : extra . columns ) { column desc copy = ( column desc ) col . clone ( ) ; copy . column = null ; this . column list . add ( copy ) ; } try { this . table = tab . copy ( ) ; } catch ( exception e ) { throw new illegal state exception ( str_ , e ) ; } this . heap = extra . heap . copy ( ) ; this . n row = tab . get nrows ( ) ; save extra state ( ) ; } <code> ConstructorDeclaration FormalParameter ReferenceType TypeArgument LocalVariableDeclaration Annotation MemberReference ReferenceType TypeArgument ReferenceType VariableDeclarator Cast ReferenceType TypeArgument ReferenceType MemberReference LocalVariableDeclaration ReferenceType VariableDeclarator MethodInvocation StatementExpression Assignment This MemberReference ClassCreator ReferenceType TypeArgument ReferenceType ForStatement EnhancedForControl VariableDeclaration ReferenceType VariableDeclarator MemberReference BlockStatement LocalVariableDeclaration ReferenceType VariableDeclarator Cast ReferenceType MethodInvocation StatementExpression Assignment MemberReference Literal StatementExpression This MemberReference MethodInvocation MemberReference TryStatement StatementExpression Assignment This MemberReference MethodInvocation CatchClause CatchClauseParameter ThrowStatement ClassCreator ReferenceType MemberReference MemberReference StatementExpression Assignment This MemberReference MethodInvocation StatementExpression Assignment This MemberReference MethodInvocation StatementExpression MethodInvocation
public result vo error resp ( logger logger , throwable e , error type error type , string msg ) { log utils . trace error ( logger , e , error type . description ( ) ) ; return new result vo ( error type . name ( ) , operation status . failure , msg ) ; } <code> MethodDeclaration ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType FormalParameter ReferenceType StatementExpression MethodInvocation MemberReference MemberReference MethodInvocation ReturnStatement ClassCreator ReferenceType MethodInvocation MemberReference MemberReference

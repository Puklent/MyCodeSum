public void makeCurrent ( EGLSurface eglSurface ) { if ( eGLDisplay == EGL14 . EGL_NO_DISPLAY ) { Log . d ( TAG , STR_ ) ; } if ( ! EGL14 . eglMakeCurrent ( eGLDisplay , eglSurface , eglSurface , eGLContext ) ) { throw new RuntimeException ( STR_ ) ; } }
public BigFractionFormat ( ) { }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_elementgettagname . class , args ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public boolean isPurgingAllowed ( ) { return mAllowPurging ; }
public JoinAppGroupDialog ( final Activity activity ) { super ( activity , DEFAULT_REQUEST_CODE ) ; }
public static void openBugWhoWindowItem ( Connector connector ) { RaptorWindowItem [ ] items = Raptor . getInstance ( ) . getWindow ( ) . getWindowItems ( BugWhoWindowItem . class ) ; boolean openNewWindow = BOOL_ ; for ( RaptorWindowItem item : items ) { BugWhoWindowItem bugWhoWindowItem = ( BugWhoWindowItem ) item ; if ( bugWhoWindowItem . getConnector ( ) == connector ) { Raptor . getInstance ( ) . getWindow ( ) . forceFocus ( item ) ; openNewWindow = BOOL_ ; break ; } } if ( openNewWindow ) { BugWhoWindowItem item = new BugWhoWindowItem ( connector . getBughouseService ( ) ) ; Raptor . getInstance ( ) . getWindow ( ) . addRaptorWindowItem ( item ) ; } }
public static void stashApplicationRepositories ( String classpath ) { if ( DBG_APP_CL ) { VM . sysWriteln ( STR_ + STR_ , classpath ) ; } if ( appCL != null && ! classpath . equals ( applicationRepositories ) ) { appCL = null ; if ( DBG_APP_CL ) { VM . sysWriteln ( STR_ ) ; } } applicationRepositories = classpath ; }
private void generateFactory ( ) { MethodVisitor m = cw . visitMethod ( ACC_PRIVATE | ACC_STATIC , NAME_FACTORY , invokedType . toMethodDescriptorString ( ) , null , null ) ; m . visitCode ( ) ; m . visitTypeInsn ( NEW , lambdaClassName ) ; m . visitInsn ( Opcodes . DUP ) ; int parameterCount = invokedType . parameterCount ( ) ; for ( int typeIndex = NUM_ , varIndex = NUM_ ; typeIndex < parameterCount ; typeIndex ++ ) { Class < ? > argType = invokedType . parameterType ( typeIndex ) ; m . visitVarInsn ( getLoadOpcode ( argType ) , varIndex ) ; varIndex += getParameterSize ( argType ) ; } m . visitMethodInsn ( INVOKESPECIAL , lambdaClassName , NAME_CTOR , constructorType . toMethodDescriptorString ( ) , BOOL_ ) ; m . visitInsn ( ARETURN ) ; m . visitMaxs ( - NUM_ , - NUM_ ) ; m . visitEnd ( ) ; }
private void calculateCurrentOffsets ( ) { final float fraction = mExpandedFraction ; mCurrentDrawX = interpolate ( mExpandedDrawX , mCollapsedDrawX , fraction ) ; mCurrentDrawY = interpolate ( mExpandedDrawY , mCollapsedDrawY , fraction ) ; setInterpolatedValues ( interpolate ( mfExpandedTextSize , mfCollapsedTextSize , fraction ) ) ; if ( mCollapsedTextColor != mExpandedTextColor ) { mTextPaint . setColor ( blendColors ( mExpandedTextColor , mCollapsedTextColor , fraction ) ) ; } else { mTextPaint . setColor ( mCollapsedTextColor ) ; } ViewCompat . postInvalidateOnAnimation ( this ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) static public void broadcastStickyIntent ( Intent intent , String permission ) { try { getDefault ( ) . broadcastIntent ( null , intent , null , null , Activity . RESULT_OK , null , null , null , BOOL_ , BOOL_ ) ; } catch ( RemoteException ex ) { } }
public char charAt ( int index ) { return STR_ ; }
private void populate ( List < ExtensionInterface > extensionList ) { JPanel appPanel = application . getAppPanel ( ) ; JMenuBar menuBar = new JMenuBar ( ) ; application . getApplicationFrame ( ) . setJMenuBar ( menuBar ) ; createFileMenu ( appPanel , menuBar ) ; createEditMenu ( menuBar ) ; createSLDMenu ( appPanel , menuBar ) ; createToolsMenu ( extensionList , menuBar ) ; }
protected int entryHashCode ( HashEntry entry ) { return entry . hashCode ; }
public TranslucentShapedFrameTest ( ) { try { UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception ex ) { } initComponents ( ) ; checkEffects ( ) ; SwingUtilities . updateComponentTreeUI ( this ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
Item newInteger ( final int value ) { key . set ( value ) ; Item result = get ( key ) ; if ( result == null ) { pool . putByte ( INT ) . putInt ( value ) ; result = new Item ( index ++ , key ) ; put ( result ) ; } return result ; }
public boolean isReference ( ) { return ! special && ( clazz == null || ! clazz . isPrimitive ( ) ) ; }
public void reset ( ) { }
public GroupEntities ( ) { }
public static List < JCExpression > toTypeList ( Iterable < ExpressionAndType > exprAndTypes ) { ListBuffer < JCExpression > lb = new ListBuffer < JCExpression > ( ) ; for ( ExpressionAndType arg : exprAndTypes ) { lb . append ( arg . type ) ; } return lb . toList ( ) ; }
public Textifier visitAnnotation ( final String desc , final boolean visible ) { buf . setLength ( NUM_ ) ; buf . append ( tab ) . append ( STR_ ) ; appendDescriptor ( FIELD_DESCRIPTOR , desc ) ; buf . append ( STR_ ) ; text . add ( buf . toString ( ) ) ; Textifier t = createTextifier ( ) ; text . add ( t . getText ( ) ) ; text . add ( visible ? STR_ : STR_ ) ; return t ; }
public static Blob toBlob ( Connection conn , Object value ) throws PageException , SQLException { if ( value instanceof Blob ) return ( Blob ) value ; if ( SystemUtil . JAVA_VERSION >= SystemUtil . JAVA_VERSION_1_6 ) { try { Blob blob = conn . createBlob ( ) ; blob . setBytes ( NUM_ , Caster . toBinary ( value ) ) ; return blob ; } catch ( Throwable t ) { return BlobImpl . toBlob ( value ) ; } } if ( isOracle ( conn ) ) { Blob blob = OracleBlob . createBlob ( conn , Caster . toBinary ( value ) , null ) ; if ( blob != null ) return blob ; } return BlobImpl . toBlob ( value ) ; }
public IncreaseHandleDetailLevelAction ( DrawingEditor editor ) { super ( editor ) ; ResourceBundleUtil labels = ResourceBundleUtil . getBundle ( STR_ ) ; labels . configureAction ( this , ID ) ; updateEnabledState ( ) ; }
public JSONWriter value ( Object object ) throws JSONException { return this . append ( JSONObject . valueToString ( object ) ) ; }
protected DoubleMatrix2D viewSelectionLike ( int [ ] rowOffsets , int [ ] columnOffsets ) { return new SelectedSparseDoubleMatrix2D ( this . elements , rowOffsets , columnOffsets , this . offset ) ; }
public static MemFileChannel newChannel ( ) { return new MemFileChannel ( ) ; }
public void runtimeInit ( TransformerImpl transformer ) throws TransformerException { }
private SettingUtils ( ) { throw new Error ( STR_ ) ; }
public static BigDecimal createBigDecimal ( final String str ) { if ( str == null ) { return null ; } if ( StringUtils . isBlank ( str ) ) { throw new NumberFormatException ( STR_ ) ; } if ( str . trim ( ) . startsWith ( STR_ ) ) { throw new NumberFormatException ( str + STR_ ) ; } return new BigDecimal ( str ) ; }
void put ( final MethodWriter owner , final ByteVector out , final int source , final boolean wideOffset ) { if ( ( status & RESOLVED ) == NUM_ ) { if ( wideOffset ) { addReference ( - NUM_ - source , out . length ) ; out . putInt ( - NUM_ ) ; } else { addReference ( source , out . length ) ; out . putShort ( - NUM_ ) ; } } else { if ( wideOffset ) { out . putInt ( position - source ) ; } else { out . putShort ( position - source ) ; } } }
public static String [ ] readLines ( String fileName ) { List < String > lines = new ArrayList < String > ( ) ; if ( reader == null ) createReader ( fileName ) ; String line = null ; try { while ( ( line = reader . readLine ( ) ) != null ) { if ( line . trim ( ) . length ( ) > NUM_ ) { lines . add ( line . trim ( ) ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; } closeReader ( ) ; return lines . toArray ( new String [ lines . size ( ) ] ) ; }
public static Plane fromPoints ( Vec4 pa , Vec4 pb , Vec4 pc ) { if ( pa == null || pb == null || pc == null ) { throw new IllegalArgumentException ( STR_ ) ; } Vec4 vab = pb . subtract3 ( pa ) ; Vec4 vac = pc . subtract3 ( pa ) ; Vec4 n = vab . cross3 ( vac ) ; double d = - n . dot3 ( pa ) ; return new Plane ( n . x , n . y , n . z , d ) ; }
public boolean isHasSubMenu ( ) { Object oo = get_Value ( COLUMNNAME_HasSubMenu ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
boolean verifyDeveloperPayload ( Purchase p ) { String payload = p . getDeveloperPayload ( ) ; return BOOL_ ; }
public void onFailure ( int statusCode , Header [ ] headers , Throwable throwable , JSONObject errorResponse ) { }
public DomainObjectException ( String message ) { super ( message ) ; }
@ Override public void lifecycleEvent ( LifecycleEvent event ) { try { host = ( Host ) event . getLifecycle ( ) ; } catch ( ClassCastException e ) { log . error ( sm . getString ( STR_ , event . getLifecycle ( ) ) , e ) ; return ; } if ( event . getType ( ) . equals ( Lifecycle . START_EVENT ) ) start ( ) ; else if ( event . getType ( ) . equals ( Lifecycle . STOP_EVENT ) ) stop ( ) ; }
public boolean entity ( ) { return holder ( ) . entity ; }
public HttpsURL ( final String user , final String password , final String host , final int port ) throws URIException { this ( user , password , host , port , null , null , null ) ; }
public static < T > T checkNotNull ( T reference , @ Nullable String errorMessageTemplate , @ Nullable Object ... errorMessageArgs ) { if ( reference == null ) { throw new NullPointerException ( format ( errorMessageTemplate , errorMessageArgs ) ) ; } return reference ; }
private void deleteSubscriptionAndUdas ( Subscription subscription ) { Long historyModificationTime = Long . valueOf ( DateFactory . getInstance ( ) . getTransactionTime ( ) ) ; subscription . setHistoryModificationTime ( historyModificationTime ) ; Query query = dm . createNamedQuery ( STR_ ) ; query . setParameter ( STR_ , Long . valueOf ( subscription . getKey ( ) ) ) ; query . setParameter ( STR_ , UdaTargetType . CUSTOMER_SUBSCRIPTION ) ; for ( Uda uda : ParameterizedTypes . iterable ( query . getResultList ( ) , Uda . class ) ) { uda . setHistoryModificationTime ( historyModificationTime ) ; dm . remove ( uda ) ; } dm . remove ( subscription ) ; }
public HttpConnection ( final String proxyHost , final int proxyPort , final String host , final int port , final Protocol protocol ) { if ( host == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( protocol == null ) { throw new IllegalArgumentException ( STR_ ) ; } synchronized ( syncLastID ) { ID = ++ lastID ; } proxyHostName = proxyHost ; proxyPortNumber = proxyPort ; hostName = host ; portNumber = protocol . resolvePort ( port ) ; protocolInUse = protocol ; }
public char next ( ) throws JSONException { int c ; if ( this . usePrevious ) { this . usePrevious = BOOL_ ; c = this . previous ; } else { try { c = this . reader . read ( ) ; } catch ( IOException exception ) { throw new JSONException ( exception ) ; } if ( c <= NUM_ ) { this . eof = BOOL_ ; c = NUM_ ; } } this . index += NUM_ ; if ( this . previous == STR_ ) { this . line += NUM_ ; this . character = c == STR_ ? NUM_ : NUM_ ; } else if ( c == STR_ ) { this . line += NUM_ ; this . character = NUM_ ; } else { this . character += NUM_ ; } this . previous = ( char ) c ; return this . previous ; }
static public NodeModel parse ( File f ) throws SAXException , IOException , ParserConfigurationException { return parse ( f , BOOL_ , BOOL_ ) ; }
public boolean add_tags ( ) { return soot . PhaseOptions . getBoolean ( options , STR_ ) ; }
public AndroidAuthenticator ( Context context , Account account , String authTokenType ) { this ( context , account , authTokenType , BOOL_ ) ; }
public Name findName ( int firstQuad ) { int hash = calcHash ( firstQuad ) ; int ix = ( hash & _mainHashMask ) ; int val = _mainHash [ ix ] ; if ( ( ( ( val > > NUM_ ) ^ hash ) << NUM_ ) == NUM_ ) { Name name = _mainNames [ ix ] ; if ( name == null ) { return null ; } if ( name . equals ( firstQuad ) ) { return name ; } } else if ( val == NUM_ ) { return null ; } val &= NUM_ ; if ( val > NUM_ ) { val -= NUM_ ; Bucket bucket = _collList [ val ] ; if ( bucket != null ) { return bucket . find ( hash , firstQuad , NUM_ ) ; } } return null ; }
public int lowestValue ( ) { if ( mapValues . isEmpty ( ) ) { return NUM_ ; } int min = Integer . MAX_VALUE ; for ( final int value : mapValues . values ( ) ) { if ( value < min ) { min = value ; } } return min ; }
public static float [ ] floats ( float ... elements ) { return elements ; }
private void updateHeader ( long headerId , int headerPosition ) { RecyclerView . ViewHolder holder = getHeaderViewHolder ( headerPosition ) ; if ( holder == null ) { return ; } currentStickyId = headerId ; int stickyViewId = getCustomStickyViewId ( ) ; if ( stickyViewId != NUM_ ) { View stickyView = holder . itemView . findViewById ( stickyViewId ) ; if ( stickyView != null ) { stickyHeader = createStickyViewBitmap ( stickyView ) ; return ; } } stickyHeader = createStickyViewBitmap ( holder . itemView ) ; }